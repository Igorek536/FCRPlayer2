// -=Gradle build script=-
// Project : FCRPlayer2
// Author  : Igorek536
// Version : 0.3
//
//=================================
// Required Gradle version: 4.4.1
// Required Java version  : 9.0.1
//=================================
//
// Until proguard 6.0beta2 not released, obfuscation is not supported!

//import proguard.gradle.ProGuardTask

// ---------------- < project > ----------------
group   'org.freecore'
version '2.0.1-DEV'

// ---------------- < plugins > ----------------
apply plugin : 'java'
apply plugin : 'application'

// ---------------- < settings > ----------------
def jarpath         = 'build/libs/'                        // Path to libraries in build directory
def jarname         = 'FCRPlayer2'                         // Name of .jar file
def mainClass       = 'org.freecore.fcrplayer2.FCRPlayer2' // Main class
def moduleName      = 'org.freecore.fcrplayer'
def compat          =  9                                   // Java's version
def proguardCfgPath = 'proguard.txt'                       // Path to proguard's configuration

repositories {
    mavenCentral()
    jcenter()
    flatDir { dirs 'libs' }
}
dependencies {
    compile name: 'NativeBass'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.10.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.10.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.10.0'
    compile group: 'org.fusesource.jansi', name: 'jansi', version: '1.16'
}
// DO NOT EDIT LINES BELOW!!!

buildscript {
    repositories {
        flatDir dirs: 'proguard'
    }
    dependencies {
        classpath ':proguard:'
    }
}
sourceCompatibility = compat
targetCompatibility = compat
mainClassName       = mainClass

// Proguard task (Currently unsupported)
//task proguard(type: ProGuardTask) {
//    configuration proguardCfgPath
//    injars jarpath + jarname + '-deobf.jar'
//    outjars jarpath + jarname + '.jar'
//}

task copyToLib(type: Copy) {
    into "$buildDir/libs/libraries"
    from configurations.runtime
}

task copyNatives(type: Copy) {
    from "."
    into "$buildDir/libs/libraries"
    include "natives/"
}

task makeJre() {

}

build.dependsOn(copyToLib)
build.dependsOn(copyNatives)
//proguard.dependsOn(build)

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

compileTestJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'junit',
                '--add-reads', "$moduleName=junit",
                '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
        ]
        classpath = files()
    }
}

test {
    inputs.property("moduleName", moduleName)
    doFirst {
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'ALL-MODULE-PATH',
                '--add-reads', "$moduleName=junit",
                '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
        ]
        classpath = files()
    }
}



// Jar configuration
jar {
    manifest {
        exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'
        attributes 'Main-Class': mainClass
        attributes 'Class-Path': configurations.runtime.files.collect { "libraries/$it.name" }.join(' ')
    }
    configurations { jar.archiveName = jarname + '.jar' }
}